// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: cv.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecruitmentServiceClient is the client API for RecruitmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecruitmentServiceClient interface {
	CreateResume(ctx context.Context, in *CreateResumeRequest, opts ...grpc.CallOption) (*CreateResumeResponse, error)
	GetResume(ctx context.Context, in *GetResumeRequest, opts ...grpc.CallOption) (*GetResumeResponse, error)
	GetAllResumes(ctx context.Context, in *GetAllResumesRequest, opts ...grpc.CallOption) (*GetAllResumesResponse, error)
	UpdateResume(ctx context.Context, in *UpdateResumeRequest, opts ...grpc.CallOption) (*UpdateResumeResponse, error)
	DeleteResume(ctx context.Context, in *DeleteResumeRequest, opts ...grpc.CallOption) (*DeleteResumeResponse, error)
	CreateVacancy(ctx context.Context, in *CreateVacancyRequest, opts ...grpc.CallOption) (*CreateVacancyResponse, error)
	GetVacancy(ctx context.Context, in *GetVacancyRequest, opts ...grpc.CallOption) (*GetVacancyResponse, error)
	GetAllVacancies(ctx context.Context, in *GetAllVacanciesRequest, opts ...grpc.CallOption) (*GetAllVacanciesResponse, error)
	UpdateVacancy(ctx context.Context, in *UpdateVacancyRequest, opts ...grpc.CallOption) (*UpdateVacancyResponse, error)
	DeleteVacancy(ctx context.Context, in *DeleteVacancyRequest, opts ...grpc.CallOption) (*DeleteVacancyResponse, error)
}

type recruitmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecruitmentServiceClient(cc grpc.ClientConnInterface) RecruitmentServiceClient {
	return &recruitmentServiceClient{cc}
}

func (c *recruitmentServiceClient) CreateResume(ctx context.Context, in *CreateResumeRequest, opts ...grpc.CallOption) (*CreateResumeResponse, error) {
	out := new(CreateResumeResponse)
	err := c.cc.Invoke(ctx, "/RecruitmentService/CreateResume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentServiceClient) GetResume(ctx context.Context, in *GetResumeRequest, opts ...grpc.CallOption) (*GetResumeResponse, error) {
	out := new(GetResumeResponse)
	err := c.cc.Invoke(ctx, "/RecruitmentService/GetResume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentServiceClient) GetAllResumes(ctx context.Context, in *GetAllResumesRequest, opts ...grpc.CallOption) (*GetAllResumesResponse, error) {
	out := new(GetAllResumesResponse)
	err := c.cc.Invoke(ctx, "/RecruitmentService/GetAllResumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentServiceClient) UpdateResume(ctx context.Context, in *UpdateResumeRequest, opts ...grpc.CallOption) (*UpdateResumeResponse, error) {
	out := new(UpdateResumeResponse)
	err := c.cc.Invoke(ctx, "/RecruitmentService/UpdateResume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentServiceClient) DeleteResume(ctx context.Context, in *DeleteResumeRequest, opts ...grpc.CallOption) (*DeleteResumeResponse, error) {
	out := new(DeleteResumeResponse)
	err := c.cc.Invoke(ctx, "/RecruitmentService/DeleteResume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentServiceClient) CreateVacancy(ctx context.Context, in *CreateVacancyRequest, opts ...grpc.CallOption) (*CreateVacancyResponse, error) {
	out := new(CreateVacancyResponse)
	err := c.cc.Invoke(ctx, "/RecruitmentService/CreateVacancy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentServiceClient) GetVacancy(ctx context.Context, in *GetVacancyRequest, opts ...grpc.CallOption) (*GetVacancyResponse, error) {
	out := new(GetVacancyResponse)
	err := c.cc.Invoke(ctx, "/RecruitmentService/GetVacancy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentServiceClient) GetAllVacancies(ctx context.Context, in *GetAllVacanciesRequest, opts ...grpc.CallOption) (*GetAllVacanciesResponse, error) {
	out := new(GetAllVacanciesResponse)
	err := c.cc.Invoke(ctx, "/RecruitmentService/GetAllVacancies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentServiceClient) UpdateVacancy(ctx context.Context, in *UpdateVacancyRequest, opts ...grpc.CallOption) (*UpdateVacancyResponse, error) {
	out := new(UpdateVacancyResponse)
	err := c.cc.Invoke(ctx, "/RecruitmentService/UpdateVacancy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentServiceClient) DeleteVacancy(ctx context.Context, in *DeleteVacancyRequest, opts ...grpc.CallOption) (*DeleteVacancyResponse, error) {
	out := new(DeleteVacancyResponse)
	err := c.cc.Invoke(ctx, "/RecruitmentService/DeleteVacancy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecruitmentServiceServer is the server API for RecruitmentService service.
// All implementations must embed UnimplementedRecruitmentServiceServer
// for forward compatibility
type RecruitmentServiceServer interface {
	CreateResume(context.Context, *CreateResumeRequest) (*CreateResumeResponse, error)
	GetResume(context.Context, *GetResumeRequest) (*GetResumeResponse, error)
	GetAllResumes(context.Context, *GetAllResumesRequest) (*GetAllResumesResponse, error)
	UpdateResume(context.Context, *UpdateResumeRequest) (*UpdateResumeResponse, error)
	DeleteResume(context.Context, *DeleteResumeRequest) (*DeleteResumeResponse, error)
	CreateVacancy(context.Context, *CreateVacancyRequest) (*CreateVacancyResponse, error)
	GetVacancy(context.Context, *GetVacancyRequest) (*GetVacancyResponse, error)
	GetAllVacancies(context.Context, *GetAllVacanciesRequest) (*GetAllVacanciesResponse, error)
	UpdateVacancy(context.Context, *UpdateVacancyRequest) (*UpdateVacancyResponse, error)
	DeleteVacancy(context.Context, *DeleteVacancyRequest) (*DeleteVacancyResponse, error)
	mustEmbedUnimplementedRecruitmentServiceServer()
}

// UnimplementedRecruitmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecruitmentServiceServer struct {
}

func (UnimplementedRecruitmentServiceServer) CreateResume(context.Context, *CreateResumeRequest) (*CreateResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResume not implemented")
}
func (UnimplementedRecruitmentServiceServer) GetResume(context.Context, *GetResumeRequest) (*GetResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResume not implemented")
}
func (UnimplementedRecruitmentServiceServer) GetAllResumes(context.Context, *GetAllResumesRequest) (*GetAllResumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllResumes not implemented")
}
func (UnimplementedRecruitmentServiceServer) UpdateResume(context.Context, *UpdateResumeRequest) (*UpdateResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResume not implemented")
}
func (UnimplementedRecruitmentServiceServer) DeleteResume(context.Context, *DeleteResumeRequest) (*DeleteResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResume not implemented")
}
func (UnimplementedRecruitmentServiceServer) CreateVacancy(context.Context, *CreateVacancyRequest) (*CreateVacancyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVacancy not implemented")
}
func (UnimplementedRecruitmentServiceServer) GetVacancy(context.Context, *GetVacancyRequest) (*GetVacancyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVacancy not implemented")
}
func (UnimplementedRecruitmentServiceServer) GetAllVacancies(context.Context, *GetAllVacanciesRequest) (*GetAllVacanciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVacancies not implemented")
}
func (UnimplementedRecruitmentServiceServer) UpdateVacancy(context.Context, *UpdateVacancyRequest) (*UpdateVacancyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVacancy not implemented")
}
func (UnimplementedRecruitmentServiceServer) DeleteVacancy(context.Context, *DeleteVacancyRequest) (*DeleteVacancyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVacancy not implemented")
}
func (UnimplementedRecruitmentServiceServer) mustEmbedUnimplementedRecruitmentServiceServer() {}

// UnsafeRecruitmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecruitmentServiceServer will
// result in compilation errors.
type UnsafeRecruitmentServiceServer interface {
	mustEmbedUnimplementedRecruitmentServiceServer()
}

func RegisterRecruitmentServiceServer(s grpc.ServiceRegistrar, srv RecruitmentServiceServer) {
	s.RegisterService(&RecruitmentService_ServiceDesc, srv)
}

func _RecruitmentService_CreateResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecruitmentServiceServer).CreateResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RecruitmentService/CreateResume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecruitmentServiceServer).CreateResume(ctx, req.(*CreateResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecruitmentService_GetResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecruitmentServiceServer).GetResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RecruitmentService/GetResume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecruitmentServiceServer).GetResume(ctx, req.(*GetResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecruitmentService_GetAllResumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllResumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecruitmentServiceServer).GetAllResumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RecruitmentService/GetAllResumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecruitmentServiceServer).GetAllResumes(ctx, req.(*GetAllResumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecruitmentService_UpdateResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecruitmentServiceServer).UpdateResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RecruitmentService/UpdateResume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecruitmentServiceServer).UpdateResume(ctx, req.(*UpdateResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecruitmentService_DeleteResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecruitmentServiceServer).DeleteResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RecruitmentService/DeleteResume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecruitmentServiceServer).DeleteResume(ctx, req.(*DeleteResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecruitmentService_CreateVacancy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVacancyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecruitmentServiceServer).CreateVacancy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RecruitmentService/CreateVacancy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecruitmentServiceServer).CreateVacancy(ctx, req.(*CreateVacancyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecruitmentService_GetVacancy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVacancyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecruitmentServiceServer).GetVacancy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RecruitmentService/GetVacancy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecruitmentServiceServer).GetVacancy(ctx, req.(*GetVacancyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecruitmentService_GetAllVacancies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllVacanciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecruitmentServiceServer).GetAllVacancies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RecruitmentService/GetAllVacancies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecruitmentServiceServer).GetAllVacancies(ctx, req.(*GetAllVacanciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecruitmentService_UpdateVacancy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVacancyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecruitmentServiceServer).UpdateVacancy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RecruitmentService/UpdateVacancy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecruitmentServiceServer).UpdateVacancy(ctx, req.(*UpdateVacancyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecruitmentService_DeleteVacancy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVacancyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecruitmentServiceServer).DeleteVacancy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RecruitmentService/DeleteVacancy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecruitmentServiceServer).DeleteVacancy(ctx, req.(*DeleteVacancyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecruitmentService_ServiceDesc is the grpc.ServiceDesc for RecruitmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecruitmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RecruitmentService",
	HandlerType: (*RecruitmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResume",
			Handler:    _RecruitmentService_CreateResume_Handler,
		},
		{
			MethodName: "GetResume",
			Handler:    _RecruitmentService_GetResume_Handler,
		},
		{
			MethodName: "GetAllResumes",
			Handler:    _RecruitmentService_GetAllResumes_Handler,
		},
		{
			MethodName: "UpdateResume",
			Handler:    _RecruitmentService_UpdateResume_Handler,
		},
		{
			MethodName: "DeleteResume",
			Handler:    _RecruitmentService_DeleteResume_Handler,
		},
		{
			MethodName: "CreateVacancy",
			Handler:    _RecruitmentService_CreateVacancy_Handler,
		},
		{
			MethodName: "GetVacancy",
			Handler:    _RecruitmentService_GetVacancy_Handler,
		},
		{
			MethodName: "GetAllVacancies",
			Handler:    _RecruitmentService_GetAllVacancies_Handler,
		},
		{
			MethodName: "UpdateVacancy",
			Handler:    _RecruitmentService_UpdateVacancy_Handler,
		},
		{
			MethodName: "DeleteVacancy",
			Handler:    _RecruitmentService_DeleteVacancy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cv.proto",
}
